<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.wxm.mapper.OAContractCirculationMapper" >
  <resultMap id="BaseResultMap" type="com.wxm.model.OAContractCirculation" >
    <id column="CONTRACT_ID" property="contractId" jdbcType="INTEGER" />
    <result column="TEMPLATE_ID" property="templateId" jdbcType="INTEGER" />
    <result column="PROCESSINSTANCE_ID" property="processInstanceId" jdbcType="NVARCHAR" />
    <result column="CONTRACT_NAME" property="contractName" jdbcType="NVARCHAR" />
    <result column="USER_ID" property="userId" jdbcType="INTEGER" />
    <result column="CONTRACT_REOPEN" property="contractReopen" jdbcType="INTEGER" />
    <result column="CONTRACT_STATUS" property="contractStatus" jdbcType="NVARCHAR" />
    <result column="WORK_STATUS" property="workStatus" jdbcType="INTEGER" />
    <result column="DESCRIPTION" property="description" jdbcType="NVARCHAR" />
    <result column="CREATE_TIME" property="createTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.wxm.model.OAContractCirculationWithBLOBs" extends="BaseResultMap" >
    <result column="CONTRACT_HTML" property="contractHtml" jdbcType="LONGVARCHAR" />
    <result column="CONTRACT_PDF" property="contractPdf" jdbcType="LONGVARBINARY" />
  </resultMap>

  <resultMap id="hashmap" type="com.wxm.entity.ReportItem" >
    <result column="TEMPLATE_NAME" property="name" jdbcType="NVARCHAR" />
    <result column="y" property="y" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    CONTRACT_ID, TEMPLATE_ID,CONTRACT_REOPEN,PROCESSINSTANCE_ID, CONTRACT_NAME,WORK_STATUS, USER_ID, CONTRACT_STATUS, DESCRIPTION, CREATE_TIME
  </sql>
  <sql id="Blob_Column_List" >
    CONTRACT_HTML, CONTRACT_PDF
  </sql>
  <select id="count" resultMap="hashmap" >
    SELECT t1.TEMPLATE_NAME,t2.y from OA_CONTRACT_TEMPLATE t1,
    (SELECT TEMPLATE_ID,count(CONTRACT_ID) as y from OA_CONTRACT_CIRCULATION
     where CREATE_TIME <![CDATA[ >= ]]> #{startTime} AND  CREATE_TIME <![CDATA[ <= ]]> #{endTime} and CONTRACT_STATUS='completed' and DESCRIPTION = 'template'
     group by TEMPLATE_ID) t2 where t1.TEMPLATE_ID=t2.TEMPLATE_ID ORDER by t2.y DESC
  </select>
  <select id="total" resultType="java.lang.Integer">
    SELECT count(CONTRACT_ID) from OA_CONTRACT_CIRCULATION
         where CREATE_TIME <![CDATA[ >= ]]> #{startTime} AND  CREATE_TIME <![CDATA[ <= ]]> #{endTime}
          and CONTRACT_STATUS= #{contractStatus}
        <if test="contractType != null" >
          and DESCRIPTION = #{contractType}
        </if>
  </select>
    <select id="groupCount" resultType="java.lang.Integer">
        SELECT count(*) from (select oa_user.USER_ID from OA_CONTRACT_CIRCULATION contract LEFT OUTER JOIN OA_USER oa_user on contract.USER_ID=oa_user.USER_ID
      where CREATE_TIME <![CDATA[ >= ]]> #{startTime} AND  CREATE_TIME  <![CDATA[ <= ]]> #{endTime} and CONTRACT_REOPEN = 1 and CONTRACT_STATUS='completed' and DESCRIPTION = 'template'
      group by oa_user.USER_ID) groupReject
    </select>
  <select id="group" resultMap="hashmap">
      select  top ${limit} groupReject.TEMPLATE_NAME,groupReject.y from (select oa_user.USER_ID,oa_user.USER_NAME as TEMPLATE_NAME,count(contract.USER_ID) as y from OA_CONTRACT_CIRCULATION contract LEFT OUTER JOIN OA_USER oa_user on contract.USER_ID=oa_user.USER_ID
      where CREATE_TIME <![CDATA[ >= ]]> #{startTime} AND  CREATE_TIME  <![CDATA[ <= ]]> #{endTime} and CONTRACT_REOPEN = 1 and CONTRACT_STATUS='completed' and DESCRIPTION = 'template'
      group by oa_user.USER_ID,oa_user.USER_NAME) groupReject where groupReject.USER_ID not in (select  top ${offset} oa_user.USER_ID as y from OA_CONTRACT_CIRCULATION contract LEFT OUTER JOIN OA_USER oa_user on contract.USER_ID=oa_user.USER_ID
      where CREATE_TIME <![CDATA[ >= ]]> #{startTime} AND  CREATE_TIME  <![CDATA[ <= ]]> #{endTime} and CONTRACT_REOPEN = 1 and CONTRACT_STATUS='completed' and DESCRIPTION = 'template'
      group by oa_user.USER_ID,oa_user.USER_NAME)
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from OA_CONTRACT_CIRCULATION
    where CONTRACT_ID = #{contractId,jdbcType=INTEGER}
  </select>
  <select id="selectByProcessInstanceId"  resultMap="ResultMapWithBLOBs" parameterType="java.lang.String">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from OA_CONTRACT_CIRCULATION
    where PROCESSINSTANCE_ID = #{processInstanceId,jdbcType=NVARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from OA_CONTRACT_CIRCULATION
    where CONTRACT_ID = #{contractId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.wxm.model.OAContractCirculationWithBLOBs" useGeneratedKeys="true"  keyProperty = "contractId" keyColumn = "CONTRACT_ID">
    insert into OA_CONTRACT_CIRCULATION (CONTRACT_ID, TEMPLATE_ID,CONTRACT_REOPEN, PROCESSINSTANCE_ID,CONTRACT_NAME,WORK_STATUS
      USER_ID, CONTRACT_STATUS, DESCRIPTION, 
      CREATE_TIME, CONTRACT_HTML, CONTRACT_PDF
      )
    values (#{contractId,jdbcType=INTEGER}, #{templateId,jdbcType=INTEGER}, #{contractReopen,jdbcType=INTEGER},#{processInstanceId,jdbcType=NVARCHAR}, #{contractName,jdbcType=NVARCHAR},#{workStatus,jdbcType=INTEGER},
      #{userId,jdbcType=INTEGER}, #{contractStatus,jdbcType=NVARCHAR}, #{description,jdbcType=NVARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{contractHtml,jdbcType=LONGVARCHAR}, #{contractPdf,jdbcType=LONGVARBINARY}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.wxm.model.OAContractCirculationWithBLOBs" >
    insert into OA_CONTRACT_CIRCULATION
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="contractId != null" >
        CONTRACT_ID,
      </if>
      <if test="templateId != null" >
        TEMPLATE_ID,
      </if>
      <if test="contractReopen != null" >
        CONTRACT_REOPEN,
      </if>
      <if test="processInstanceId != null" >
        PROCESSINSTANCE_ID,
      </if>

      <if test="contractName != null" >
        CONTRACT_NAME,
      </if>
      <if test="workStatus != null" >
        WORK_STATUS,
      </if>
      <if test="userId != null" >
        USER_ID,
      </if>
      <if test="contractStatus != null" >
        CONTRACT_STATUS,
      </if>
      <if test="description != null" >
        DESCRIPTION,
      </if>
      <if test="createTime != null" >
        CREATE_TIME,
      </if>
      <if test="contractHtml != null" >
        CONTRACT_HTML,
      </if>
      <if test="contractPdf != null" >
        CONTRACT_PDF,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="contractId != null" >
        #{contractId,jdbcType=INTEGER},
      </if>
      <if test="templateId != null" >
        #{templateId,jdbcType=INTEGER},
      </if>
      <if test="contractReopen != null" >
        #{contractReopen,jdbcType=INTEGER},
      </if>
      <if test="processInstanceId != null" >
        #{processInstanceId,jdbcType=NVARCHAR},
      </if>
      <if test="contractName != null" >
        #{contractName,jdbcType=NVARCHAR},
      </if>
      <if test="workStatus != null" >
        #{workStatus,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="contractStatus != null" >
        #{contractStatus,jdbcType=NVARCHAR},
      </if>
      <if test="description != null" >
        #{description,jdbcType=NVARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="contractHtml != null" >
        #{contractHtml,jdbcType=LONGVARCHAR},
      </if>
      <if test="contractPdf != null" >
        #{contractPdf,jdbcType=LONGVARBINARY},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.wxm.model.OAContractCirculationWithBLOBs" useGeneratedKeys="true"  keyProperty = "contractId" keyColumn = "CONTRACT_ID">
    update OA_CONTRACT_CIRCULATION
    <set >
      <if test="templateId != null" >
        TEMPLATE_ID = #{templateId,jdbcType=INTEGER},
      </if>
      <if test="contractReopen != null" >
        CONTRACT_REOPEN = #{contractReopen,jdbcType=INTEGER},
      </if>
      <if test="processInstanceId != null" >
        PROCESSINSTANCE_ID=#{processInstanceId,jdbcType=NVARCHAR},
      </if>
      <if test="contractName != null" >
        CONTRACT_NAME = #{contractName,jdbcType=NVARCHAR},
      </if>
      <if test="workStatus != null" >
        WORK_STATUS = #{workStatus,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        USER_ID = #{userId,jdbcType=INTEGER},
      </if>
      <if test="contractStatus != null" >
        CONTRACT_STATUS = #{contractStatus,jdbcType=NVARCHAR},
      </if>
      <if test="description != null" >
        DESCRIPTION = #{description,jdbcType=NVARCHAR},
      </if>
      <if test="createTime != null" >
        CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="contractHtml != null" >
        CONTRACT_HTML = #{contractHtml,jdbcType=LONGVARCHAR},
      </if>
      <if test="contractPdf != null" >
        CONTRACT_PDF = #{contractPdf,jdbcType=LONGVARBINARY},
      </if>
    </set>
    where CONTRACT_ID = #{contractId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.wxm.model.OAContractCirculationWithBLOBs" >
    update OA_CONTRACT_CIRCULATION
    set TEMPLATE_ID = #{templateId,jdbcType=INTEGER},
      CONTRACT_REOPEN = #{contractReopen,jdbcType=INTEGER},
      PROCESSINSTANCE_ID = #{processInstanceId,jdbcType=NVARCHAR},
      CONTRACT_NAME = #{contractName,jdbcType=NVARCHAR},
      WORK_STATUS = #{workStatus,jdbcType=INTEGER},
      USER_ID = #{userId,jdbcType=INTEGER},
      CONTRACT_STATUS = #{contractStatus,jdbcType=NVARCHAR},
      DESCRIPTION = #{description,jdbcType=NVARCHAR},
      CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      CONTRACT_HTML = #{contractHtml,jdbcType=LONGVARCHAR},
      CONTRACT_PDF = #{contractPdf,jdbcType=LONGVARBINARY}
    where CONTRACT_ID = #{contractId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.wxm.model.OAContractCirculation" >
    update OA_CONTRACT_CIRCULATION
    set TEMPLATE_ID = #{templateId,jdbcType=INTEGER},
      CONTRACT_REOPEN = #{contractReopen,jdbcType=INTEGER},
      PROCESSINSTANCE_ID = #{processInstanceId,jdbcType=NVARCHAR},
      CONTRACT_NAME = #{contractName,jdbcType=NVARCHAR},
      WORK_STATUS = #{workStatus,jdbcType=INTEGER},
      USER_ID = #{userId,jdbcType=INTEGER},
      CONTRACT_STATUS = #{contractStatus,jdbcType=NVARCHAR},
      DESCRIPTION = #{description,jdbcType=NVARCHAR},
      CREATE_TIME = #{createTime,jdbcType=TIMESTAMP}
    where CONTRACT_ID = #{contractId,jdbcType=INTEGER}
  </update>
</mapper>